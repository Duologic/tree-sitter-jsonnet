======================
Indexing priority
======================

"Hello" + xxx.name

---

(document
  (binaryop
    left: (string (string_start) (string_content) (string_end))
    operator: (binaryop_additive)
    right: (fieldaccess (id) last: (id))
  ))

======================
Indexing priority 2
======================

"Hello" + xxx[name]

---

(document
  (binaryop
    left: (string (string_start) (string_content) (string_end))
    operator: (binaryop_additive)
    right: (indexing (id) (id))
  ))

======================
Indexing priority 3
======================

"Hello" + super.name

---

(document
  (binaryop
    left: (string (string_start) (string_content) (string_end))
    operator: (binaryop_additive)
    right: (fieldaccess_super (super) (id))
  ))

======================
Indexing priority 4
======================

"Hello" + super['name']

---

(document
  (binaryop
    left: (string (string_start) (string_content) (string_end))
    operator: (binaryop_additive)
    right: (indexing_super
                (super)
                (string
                    (string_start)
                    (string_content)
                    (string_end)))
  ))

======================
Parses example 2
======================

{
  person1: {
    name: "Alice",
    welcome: "Hello " + self.name + "!",
  },
  person2: self.person1 { name: "Bob" },
}

---
(document
  (object
    (member
      (field (fieldname (id))
        (object
          (member
            (field (fieldname (id))
              (string (string_start) (string_content) (string_end))
            ))
          (member
            (field (fieldname (id))
               (binaryop
                 left:
                   (binaryop
                      left: (string (string_start) (string_content) (string_end))
                      operator: (binaryop_additive)
                      right: (fieldaccess (self) last: (id)))
                  operator: (binaryop_additive)
                  right: (string (string_start) (string_content) (string_end))
                 )))
            )))
      (member
        (field (fieldname (id))
          (implicit_plus
             (fieldaccess (self) last: (id))
             (object
                 (member
                   (field (fieldname (id))
                        (string (string_start) (string_content) (string_end))
       ))))))))

=================================
should parse basic call foo(1,2)
=================================

{
  x1: foo(1,2)
}

---

(document
  (object
     (member (field (fieldname (id))
               (functioncall
                   (id)
                   (args (number)
                         (number)))
))))

=================================
should parse basic call foo(1,2,3)
=================================

{
  x1: foo(1,2,3)
}

---

(document
  (object
     (member (field (fieldname (id))
               (functioncall
                   (id)
                   (args (number)
                         (number)
                         (number)))
))))

=================================
should parse tailstrict
=================================

{
  x1: foo(1,2,3) tailstrict
}

---

(document
  (object
     (member (field (fieldname (id))
               (functioncall
                   (id)
                   (args (number)
                         (number)
                         (number))
               (tailstrict))
))))

=================================
should parse if-then-else
=================================

if x > 0 then x + 2 else x - 2

---
(document
  (conditional
    condition:
      (binaryop
          left: (id)
          operator: (binaryop_comparison)
          right: (number))
    consequence:
      (binaryop
          left: (id)
          operator: (binaryop_additive)
          right: (number))
    alternative:
      (binaryop
          left: (id)
          operator: (binaryop_additive)
          right: (number))))

=================================
if-then-else vs local priority
=================================

local a = if x > 0 then x + 2 else x - 2; a + 2

---
(document
    (local_bind
      (local)
      (bind (id)
        (conditional
          condition:
            (binaryop
                left: (id)
                operator: (binaryop_comparison)
                right: (number))
          consequence:
            (binaryop
                left: (id)
                operator: (binaryop_additive)
                right: (number))
          alternative:
            (binaryop
                left: (id)
                operator: (binaryop_additive)
                right: (number))
         ))
      (binaryop
          left: (id)
          operator: (binaryop_additive)
          right: (number))))

=================================
operator precedence
=================================
3 + 4 * true

---

(document
  (binaryop
     left: (number)
     operator: (binaryop_additive)
     right:
        (binaryop
           left: (number)
           operator: (binaryop_multiplicative)
           right: (true))))

======================
Application priority
======================

!foo(2, 3)

---
(document
  (unary
      operator: (unaryop)
      argument: (functioncall
                    (id)
                    (args (number) (number)))))

======================
Implicit plus with empty object
======================

({}) { }

---

(document
  (implicit_plus
    (parenthesis (object))
    (object)))
